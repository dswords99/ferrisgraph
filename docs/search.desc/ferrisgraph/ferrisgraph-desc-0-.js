searchState.loadedDescShard("ferrisgraph", 0, "A directed, weighted multi-graph implementation using Rust …\nAdds an edge to the graph. Returns <code>true</code> if successful, and …\nAdds a node to the graph. Returns <code>true</code> if successful, and …\nThis function adds an undirected edge, i.e. it …\nThis function performs Breadth First Search on the graph, …\nThis function clones a graph. It is required that the node …\nReturns an optional <code>Vec&lt;&amp;N&gt;</code> containing all the outgoing …\nThis function returns the degree of the given node. That …\nThis function performs Depth First Search on the graph …\nThis function performs Djikstra’s algorithm on the …\nReturns an optional <code>Vec&lt;(&amp;N, &amp;E)&gt;</code> containing all the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function returns true if the graph contains a cycle, …\nThis function returns the in-degree of the given node. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if an edge exists between the source and …\nReturns <code>true</code> if a given edge is in the graph.\nReturns <code>true</code> if the graph has no nodes (and thus, no …\nReturns <code>true</code> if a given node is in the graph.\nCreates an empty <code>Graph</code>.\nReturns a reference to the set of nodes in the graph.\nThis function returns the number of edges that are …\nReturns the amount of nodes present in the graph.\nThis function returns the out-degree of the given node. …\nRemoves a given edge from the graph. Returns <code>true</code> if …\nRemoves a node from the graph, and thus all associated …")