var searchIndex = new Map(JSON.parse('[["ferrisgraph",{"t":"CQECCCCFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["graph","graph_with_nodes","Graph","algos","graph","macros","queries","Graph","GraphError","NodeNotFound","add_edge","add_node","add_undirected_edge","bfs","borrow","","borrow_mut","","clone","connections","degree","dfs","djikstra","edges","eq","","fmt","","","from","","has_cycle","in_degree","into","","is_connected","is_edge","is_empty","is_node","new","nodes","num_edges","num_nodes","out_degree","remove_edge","remove_node","to_string","try_from","","try_into","","type_id",""],"q":[[0,"ferrisgraph"],[2,"ferrisgraph::graph"],[7,"ferrisgraph::graph::graph"],[53,"core::option"],[54,"core::hash"],[55,"core::cmp"],[56,"core::fmt"],[57,"core::clone"],[58,"std::collections::hash::map"],[59,"core::result"],[60,"alloc::vec"],[61,"alloc::collections::btree::set"],[62,"core::ops::arith"],[63,"alloc::rc"],[64,"alloc::string"],[65,"core::any"]],"i":"`````````Ahd000010100000001011010001000000000001010101","f":"``````````{{{f{b{d{ce}}}}{f{c}}{f{c}}{h{e}}}j{lnA`Ab}{lnAb}}{{{f{b{d{ce}}}}c}j{lnA`Ab}{lnAb}}{{{f{b{d{ce}}}}{f{c}}{f{c}}{h{e}}}j{lnAbA`Ad}{lnAbAd}}{{{f{{d{ce}}}}{f{c}}}{{Aj{{Af{{f{c}}{f{c}}}}{Ah{c}}}}}{lnA`Ab}{lnAb}}{f{{f{c}}}{}}0{{{f{b}}}{{f{bc}}}{}}0{{{f{{d{ce}}}}}{{d{ce}}}{lnAbA`Ad}{lnAbAd}}{{{f{{d{ce}}}}{f{c}}}{{Aj{{h{{Al{{f{c}}}}}}{Ah{c}}}}}{lnA`Ab}{lnAb}}{{{f{{d{ce}}}}{f{c}}}An{lnA`Ab}{lnAb}}{{{f{{d{ce}}}}{f{c}}}{{Aj{{B`{{f{c}}}}{Ah{c}}}}}{lnA`Ab}{lnAb}}{{{f{{d{ce}}}}{f{c}}ee}{{Aj{{Bb{{Af{{f{c}}e}}{Af{{f{c}}{h{{f{c}}}}}}}}{Ah{c}}}}}{lnAbA`}{lnAb{Bf{}{{Bd{}}}}Ad}}{{{f{{d{ce}}}}{f{c}}}{{Aj{{h{{Al{{Bb{{f{c}}{f{{h{e}}}}}}}}}}{Ah{c}}}}}{lnA`Ab}{lnAb}}{{{f{{d{ce}}}}{f{{d{ce}}}}}j{lnAbA`Bh}{lnAbBh}}{{{f{{Ah{c}}}}{f{{Ah{c}}}}}j{A`Bh}}{{{f{{d{ce}}}}{f{bBj}}}Bl{lnAbA`A`}{lnAbA`}}{{{f{{Ah{c}}}}{f{bBj}}}Bl{A`A`}}{{{f{{Ah{c}}}}{f{bBj}}}BlA`}{cc{}}0{{{f{{d{ce}}}}}j{lnA`Ab}{lnAb}}:{{}c{}}0{{{f{{d{ce}}}}{f{c}}{f{c}}}j{lnA`Ab}{lnAb}}{{{f{{d{ce}}}}{f{c}}{f{c}}{f{{h{e}}}}}j{lnA`Ab}{lnAb}}3{{{f{{d{ce}}}}{f{c}}}j{lnA`Ab}{lnAb}}{{}{{d{ce}}}{lnA`Ab}{lnAb}}{{{f{{d{ce}}}}}{{f{{B`{{Bn{c}}}}}}}{lnA`Ab}{lnAb}}{{{f{{d{ce}}}}}An{lnA`Ab}{lnAb}}0{{{f{{d{ce}}}}{f{c}}}An{lnA`Ab}{lnAb}}{{{f{b{d{ce}}}}{f{c}}{f{c}}{h{e}}}j{lnA`Ab}{lnAb}}{{{f{b{d{ce}}}}{f{c}}}j{lnA`Ab}{lnAb}}{fC`}{c{{Aj{e}}}{}{}}0{{}{{Aj{c}}}{}}0{fCb}0","D":"Ch","p":[[0,"mut"],[5,"Graph",7],[1,"reference"],[6,"Option",53],[1,"bool"],[10,"Hash",54],[10,"Eq",55],[10,"Debug",56],[10,"Ord",55],[10,"Clone",57],[5,"HashMap",58],[6,"GraphError",7],[6,"Result",59],[5,"Vec",60],[1,"usize"],[5,"BTreeSet",61],[1,"tuple"],[17,"Output"],[10,"Add",62],[10,"PartialEq",55],[5,"Formatter",56],[8,"Result",56],[5,"Rc",63],[5,"String",64],[5,"TypeId",65]],"r":[[2,7]],"b":[[27,"impl-Debug-for-GraphError%3C\'a,+N%3E"],[28,"impl-Display-for-GraphError%3C\'a,+N%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABkABQAAAAcACQABAA8AAwAZAAQALwAGAA=="}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[2873]}